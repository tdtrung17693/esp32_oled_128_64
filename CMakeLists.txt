cmake_minimum_required(VERSION 3.9)
set(ENV{HOME} "/home/tdtrung17693")
set(ENV{PATH} "/media/Data/Android/SDK/platform-tools:/media/Data/Android/SDK/tools:/home/tdtrung17693/.rbenv/shims:/home/tdtrung17693/.config/composer/vendor/bin:/opt/yarn-v1.3.2/bin:/home/tdtrung17693/.yarn/bin:/home/tdtrung17693/.local/bin:/home/tdtrung17693/.rbenv/bin:/home/tdtrung17693/esp/xtensa-esp32-elf/bin:/opt/genymobile/genymotion/tools:/usr/local/bin:/usr/local/sbin:/home/tdtrung17693/.nvm/versions/node/v8.9.4/bin:/usr/bin:/bin:/home/tdtrung17693/bin:/usr/sbin:/home/tdtrung17693/.fzf/bin")

set(ENV{IDF_PATH} "$ENV{HOME}/esp/esp-idf")

set(CMAKE_C_COMPILER "$ENV{HOME}/esp/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc")
set(CMAKE_CXX_COMPILER "$ENV{HOME}/esp/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++")
set(CMAKE_AR "$ENV{HOME}/esp/xtensa-esp32-elf/bin/xtensa-esp32-elf-ar")
set(CMAKE_RANLIB "$ENV{HOME}/esp/xtensa-esp32-elf/bin/xtensa-esp32-elf-ranlib")
set(CMAKE_LINKER "$ENV{HOME}/esp/xtensa-esp32-elf/bin/xtensa-esp32-elf-ld")

SET(CMAKE_C_FLAGS "-nostdlib -Wall -Werror")
SET(CMAKE_CXX_FLAGS_DISTRIBUTION "-fno-rtti -fno-exceptions -Wall -Werror=all -Wno-error=deprecated-declarations -Wextra -Wno-unused-parameter -Wno-sign-compare -Wno-error=unused-function -Og -g3 -nostdlib -Wpointer-arith -Wno-error=unused-but-set-variable -Wno-error=unused-variable -mlongcalls -ffunction-sections -fdata-sections -fstrict-volatile-bitfields -DWITH_POSIX -DIDF_VER=&quot;2.211.0&quot; -DESP32 -DESP_PLATFORM -DF_CPU=240000000L -DHAVE_CONFIG_H -DMBEDTLS_CONFIG_FILE=&quot;mbedtls/esp_config.h&quot; -DPLATFORMIO=30501 -DARDUINO_NodeMCU-32S")
SET(CMAKE_C_FLAGS_DISTRIBUTION "-Wno-old-style-declaration -Wall -Werror=all -Wno-error=deprecated-declarations -Wextra -Wno-unused-parameter -Wno-sign-compare -Wno-error=unused-function -Og -g3 -nostdlib -Wpointer-arith -Wno-error=unused-but-set-variable -Wno-error=unused-variable -mlongcalls -ffunction-sections -fdata-sections -fstrict-volatile-bitfields -DWITH_POSIX -DIDF_VER=&quot;2.211.0&quot; -DESP32 -DESP_PLATFORM -DF_CPU=240000000L -DHAVE_CONFIG_H -DMBEDTLS_CONFIG_FILE=&quot;mbedtls/esp_config.h&quot; -DPLATFORMIO=30501 -DARDUINO_NodeMCU-32S")


include(${CMAKE_ROOT}/Modules/ExternalProject.cmake)


include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/gatt/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/avct/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/smp/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/rfcomm/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/avrc/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/l2cap/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/a2dp/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/avdt/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/gap/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/sdp/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/stack/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/api/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/device/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btc/profile/std/smp/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btc/profile/std/a2dp/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btc/profile/std/hid/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btc/profile/std/battery/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btc/profile/std/dis/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btc/profile/std/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btc/profile/esp/blufi/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btc/profile/esp/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btc/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/bta/sys/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/bta/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/gki/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/btcore/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/external/sbc/encoder/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/external/sbc/decoder/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/osi/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/hci/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/utils/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/bluedroid/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/aws_iot/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/aws_iot/aws-iot-device-sdk-embedded-C/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/app_trace/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/app_update/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/xtensa-debug-module/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bootloader_support/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/bootloader_support/include_priv")
include_directories("$ENV{HOME}/esp/esp-idf/components/bt/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/coap/port/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/coap/port/include/coap")
include_directories("$ENV{HOME}/esp/esp-idf/components/coap/libcoap/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/coap/libcoap/include/coap")
include_directories("$ENV{HOME}/esp/esp-idf/components/cxx/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/driver/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/driver/include/driver")
include_directories("$ENV{HOME}/esp/esp-idf/components/esp32/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/ethernet/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/expat/include/expat")
include_directories("$ENV{HOME}/esp/esp-idf/components/expat/port/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/fatfs/src")
include_directories("$ENV{HOME}/esp/esp-idf/components/freertos/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/jsmn/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/json/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/json/port/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/libsodium/libsodium/src/libsodium/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/libsodium/libsodium/src/libsodium/include/sodium")
include_directories("$ENV{HOME}/esp/esp-idf/components/log/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/lwip/include/lwip")
include_directories("$ENV{HOME}/esp/esp-idf/components/lwip/include/lwip/port")
include_directories("$ENV{HOME}/esp/esp-idf/components/lwip/include/lwip/posix")
include_directories("$ENV{HOME}/esp/esp-idf/components/lwip/apps/ping")
include_directories("$ENV{HOME}/esp/esp-idf/components/mbedtls/port/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/mbedtls/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/mdns/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/micro-ecc/micro-ecc")
include_directories("$ENV{HOME}/esp/esp-idf/components/newlib/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/newlib/platform_include")
include_directories("$ENV{HOME}/esp/esp-idf/components/nghttp/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/nghttp/port/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/nvs_flash/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/openssl/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/openssl/include/internal")
include_directories("$ENV{HOME}/esp/esp-idf/components/openssl/include/platform")
include_directories("$ENV{HOME}/esp/esp-idf/components/openssl/include/openssl")
include_directories("$ENV{HOME}/esp/esp-idf/components/sdmmc/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/spi_flash/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/tcpip_adapter/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/soc/esp32/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/soc/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/heap/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/ulp/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/vfs/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/wear_levelling/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/wpa_supplicant/include")
include_directories("$ENV{HOME}/esp/esp-idf/components/wpa_supplicant/port/include")
include_directories("$ENV{HOME}/esp/xtensa-esp32-elf/xtensa-esp32-elf/include")
include_directories("$ENV{HOME}/esp/xtensa-esp32-elf/xtensa-esp32-elf/include/c++/5.2.0")
include_directories("$ENV{HOME}/esp/xtensa-esp32-elf/xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf")
include_directories("$ENV{HOME}/esp/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/5.2.0/include-fixed")
include_directories("$ENV{HOME}/esp/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/5.2.0/include")
include_directories("./main")
include_directories("./build/include/")

set(CMAKE_FIND_ROOT_PATH "${CROSS_PATH}")
# Adjust the default behavior of the FIND_XXX() commands:
# search programs in the host environment only.
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# Search headers and libraries in the target environment only.
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

FILE(GLOB_RECURSE SRC_LIST "main/*.c")
add_executable(${PROJECT_NAME} ${SRC_LIST})
add_custom_target(BUILD COMMAND  $(MAKE)
   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(FLASH COMMAND  $(MAKE) flash
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)
